(:
 Copyright 2002-2016 MarkLogic Corporation.  All Rights Reserved. 

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
:)
xquery version "1.0-ml";

module namespace es-codegen = "http://marklogic.com/entity-services-codegen";
declare namespace es = "http://marklogic.com/entity-services";
declare namespace tde = "http://marklogic.com/xdmp/tde";


declare function es-codegen:conversion-module-generate(
    $entity-type as map:map
) as document-node()
{
    let $default-base-uri := "http://example.org/"
    let $info := map:get($entity-type, "info")
    let $prefix := map:get($info, "title")
    let $version:= map:get($info, "version")
    let $base-uri := fn:head((map:get($info, "baseUri"), $default-base-uri))
    return
document {
<conversion-module>
xquery version "1.0-ml";

(: This module was generated by MarkLogic Entity Services. 
 : The source entity type document was {$prefix}-{$version}
 :
 : Modification History:
 :   Generated at timestamp: {fn:current-dateTime()}
 :   Persisted by AUTHOR
 :   Date: DATE
 :)
module namespace {$prefix} = "{$base-uri}/{$prefix}-{$version}";

import module namespace es = "http://marklogic.com/entity-services" 
    at "/MarkLogic/entity-services/entity-services.xqy";

(: extract-instance-{{entity-type}} Functions
 : The following functions take as input some source document from which to
 : extract values.  Edit each function to create a valid entity instance.
 :)
{ (: iterate over entity types to make extract instance stubs :)
    for $individual-entity-type in map:keys(map:get($entity-type, "definitions"))
    return 
    <extract-instance>
declare function {$prefix}:extract-instance-{$individual-entity-type}(
    $source-document as node()
) as map:map
{{
    let $m := map:map()
    let $_ := map:put($m, "big", "deal")
    return $m
}};
    </extract-instance>/text()
}

(: instance-to-canonical-xml function
 : Depending on the relationships among your entity types
 : you may wish to modify sections of this function
 : to meet your own purposes.
 :)
declare function {$prefix}:instance-to-canonical-xml(
    $entity-instance as map:map
) as element(es:instance)
{{
    element es:instance {{
        element es:info {{
            element es:title {{ map:get($entity-instance, "info")=>map:get("title") }},
            element es:version {{ map:get($entity-instance, "info")=>map:get("version") }}
        }},
        $entity-instance
    }}
}};


(: instance-to-envelope 
 : This function is used to wrap sources and entity instances
 : within the same document
 :)
declare function {$prefix}:instance-to-envelope(
    $entity-instance as map:map
) as text()
{{
    element es:envelope {{
        {$prefix}:instance-to-canonical-xml($entity-instance),
        element es:constrained {{
            map:get($entity-instance, "$sources") 
        }}
    }}
}};


(: instance-from-document 
 : if you have modified instance-to-envelope
 : you may need also to modify this function
 :)
declare function {$prefix}:instance-from-document(
    $document as document-node()
) as map:map
{{
    let $xml-from-document := {$prefix}:instance-xml-from-document($document)
    let $instance := map:map()
    let $_ := map:put($instance, "key", "val")
    return $instance
}};


declare function {$prefix}:instance-xml-from-document(
    $document as document-node()
) as element()
{{
    $document//es:entity/(* except es:info)[es:info/es:version eq "{$version}"]
}};

declare function {$prefix}:instance-json-from-document(
    $document as document-node()
) as object-node()
{{
    xdmp:to-json( {$prefix}:instance-from-document($document) )
}};
</conversion-module>/text()
}
};
