xquery version "1.0-ml";
module namespace test-1-from-test-1 = "http://arr-to-scal#Test-1-0.0.2-from-Test-1-0.0.1";

import module namespace es = "http://marklogic.com/entity-services" 
    at "/MarkLogic/entity-services/entity-services.xqy";

(: 
 : This module was generated by MarkLogic Entity Services. 
 : Its purpose is to create instances of entity types
 : defined in
 : $tar
 : from documents that were persisted 
 : according to entity type
 : $source
 :
 : Modification History:
 :   Generated at timestamp: 2016-07-22T15:14:42.922785-07:00
 :   Persisted by AUTHOR
 :   Date: DATE
 :)


(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function test-1-from-test-1:convert-instance-Customer(
    $source-node as node()
) as map:map
{
    json:object()
(: The following line identifies the type of this instance.  Do not change it. :)
        =>map:with('$type', 'Customer')
(: The following lines are generated from the 'Customer' entity type.               :)
    =>   map:with('CustomerId',             xs:string#1($source-node/Customer/CustomerId))
     =>es:optional('CompanyName',            xs:string#1($source-node/Customer/CompanyName))
     =>es:optional('Country',                xs:string#1($source-node/Customer/Country))
     =>es:optional('Address',                test-1-from-test-1:extract-array($source-node/Customer/Address, xs:string#1))

};
    

(:~
 : This function includes an array if there are items to put in it.
 : If there are no such items, then it returns an empty sequence.
 : TODO EA-4? move to es: module
 :)
declare function test-1-from-test-1:extract-array(
    $path-to-property as item()*,
    $fn as function(*)
) as json:array?
{
    if (empty($path-to-property))
    then ()
    else json:to-array($path-to-property ! $fn(.))
};