xquery version "1.0-ml";
module namespace localArrayRefTgt-from-localArrayRefSrc
    = "http://localArrayRefTgt/localArrayRefTgt-0.0.2-from-localArrayRefSrc-0.0.1";

import module namespace es = "http://marklogic.com/entity-services"
    at "/MarkLogic/entity-services/entity-services.xqy";

declare option xdmp:mapping "false";

(:
 This module was generated by MarkLogic Entity Services.
 Its purpose is to create instances of entity types
 defined in
 localArrayRefTgt, version 0.0.2
 from documents that were persisted according to model
 localArrayRefSrc, version 0.0.1

 Modification History:
 Generated at timestamp: 2016-10-27T22:22:01.068666-07:00
 Persisted by AUTHOR
 Date: DATE

 Target Model localArrayRefTgt-0.0.2 Info:

 Type Order: 
    primaryKey: CustomerID, ( in source: CustomerID )
    required: CustomerID, ( in source: CustomerID )
    range indexes: None ( in source: CustomerID, OrderDate )
    word lexicons: CustomerID, ( in source: CustomerID, OrderDate )
 
 Type OrderDetail: 
    primaryKey: ProductID, ( in source: ProductID )
    required: ProductID, ( in source: None )
    range indexes: ProductID, Quantity, ( in source: None )
    word lexicons: ProductID, Quantity, ( in source: None )
 
:)


(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function localArrayRefTgt-from-localArrayRefSrc:convert-instance-Order(
    $source-node as node()
) as map:map
{
    json:object()
    (: The following line identifies the type of this instance.  Do not change it. :)
    =>map:with('$type', 'Order')
    (: The following lines are generated from the 'Order' entity type. :)
    =>   map:with('CustomerID',             xs:string($source-node/Order/CustomerID))
    =>es:optional('OrderDate',              xs:dateTime($source-node/Order/OrderDate))
    =>es:optional('ShipAddress',            xs:string($source-node/Order/ShipAddress))
    =>es:optional('arr2arr',                es:extract-array($source-node/Order/arr2arr, xs:string#1))
    =>es:optional('OrderDetails',           es:extract-array($source-node/Order/OrderDetails/*, localArrayRefTgt-from-localArrayRefSrc:convert-instance-OrderDetail#1))
    (:function($path) { json:object()=>map:with('$type', 'OrderDetail')=>map:with('$ref', $path/OrderDetail/text() ) })):)

};
    
(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function localArrayRefTgt-from-localArrayRefSrc:convert-instance-OrderDetail(
    $source-node as node()
) as map:map
{
    json:object()
    (: The following line identifies the type of this instance.  Do not change it. :)
    =>map:with('$type', 'OrderDetail')
    (: The following lines are generated from the 'OrderDetail' entity type. :)
    =>   map:with('ProductID',              xs:integer($source-node/OrderDetail/ProductID))
    =>es:optional('UnitPrice',              xs:integer($source-node/OrderDetail/UnitPrice))
    =>es:optional('Quantity',               xs:integer($source-node/OrderDetail/Quantity))

};