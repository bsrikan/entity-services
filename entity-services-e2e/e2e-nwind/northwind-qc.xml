<export><workspace name="northwind"><query name="generate-artifacts" focus="false" listorder="2" taborder="2" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";

import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 
import module namespace esi = "http://marklogic.com/entity-services-impl" at "/MarkLogic/entity-services/entity-services-impl.xqy"; 

(: this script generates all of the artifacts supported in Entity Services for EA-2 :)
let $project-location := "/home/cgreer/source/xdmp-entity-services/entity-services-examples"
let $gen-prefix := $project-location || "/gen/"
let $d := es:entity-type-from-node(fn:doc("simple-race.json"))
return ($d ,
xdmp:save($gen-prefix || "ml-modules/ext/Race-0.0.1.xqy", es:conversion-module-generate($d)),
xdmp:save($gen-prefix || "ml-schemas/Race-0.0.1.tdex", es:extraction-template-generate($d)),
xdmp:save($gen-prefix || "ml-schemas/Race-0.0.1.xsd", es:schema-generate($d)),
xdmp:save($gen-prefix || "ml-config/databases/content-database.json", es:database-properties-generate($d))
)</query><query name="check extract-instance" focus="false" listorder="3" taborder="3" active="true" database="8180372341861010319" server="11262157093508720066" mode="xquery">import module namespace race = "http://grechaw.github.io/entity-types#Race-0.0.1" at "/ext/Race-0.0.1.xqy";

(: This script runs extract functions to verify the initial import and how extraction looks :)
let $runner-e := race:extract-instance-Runner(
doc("/home/cgreer/source/xdmp-entity-services/entity-services-examples/data/simple-race-0.0.1/runners/xaw.json"))
let $run-e := race:extract-instance-Run(
doc("/home/cgreer/source/xdmp-entity-services/entity-services-examples/data/simple-race-0.0.1/runs/138.json"))
let $race-e := 
race:extract-instance-Race(
doc("/home/cgreer/source/xdmp-entity-services/entity-services-examples/data/simple-race-0.0.1/races/10k2.json"))
return
(
$runner-e,
$run-e,
race:instance-to-envelope($run-e),
$race-e,
race:instance-to-envelope($race-e)
)</query><query name="ingest" focus="false" listorder="1" taborder="1" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
import module namespace race = "http://grechaw.github.io/entity-types#Race-0.0.1" at "/ext/Race-0.0.1.xqy";

declare namespace html = "http://www.w3.org/1999/xhtml";

(: This is the ingest script.  In my case, 'staging' is a collection.
 : The ingestion embeds runners into runs, and so we skip runners and
 : just do run ingestion.
 :)
for $uri in cts:uris( (), (), cts:collection-query("raw") )
return 
  if (contains($uri, "/runners/"))
  then () (: "runners" are denormalized into runs, so we don't put them in prod as separate doc. :)
  else if (contains($uri, "/runs/"))
  then
    xdmp:document-insert("/runs/" || xdmp:random() || ".xml", 
      race:instance-to-envelope(
        race:extract-instance-Run(doc($uri))), 
      xdmp:default-permissions(), "run-envelopes")
  else if (contains($uri, "/races/"))
  then
    xdmp:document-insert("/races/" || xdmp:random() || ".xml", 
      race:instance-to-envelope(
        race:extract-instance-Race(doc($uri))), 
      xdmp:default-permissions(), "race-envelopes")
  else ()

</query><query name="race" focus="false" listorder="5" taborder="5" active="true" database="8180372341861010319" server="11262157093508720066" mode="sql">SELECT l.name, l.wonByRunner, l.courseLength, rr.id, rr.distance, rr.duration, rr.runByRunner
FROM Race l, Race_comprisedOfRuns r, Run rr
where l.name = r.name
and r.comprisedOfRuns = rr.id
and l.name = 'Half Marathon One'
order by rr.duration
limit 1
</query><query name="tde-manual" focus="false" listorder="4" taborder="4" active="true" database="8180372341861010319" server="11262157093508720066" mode="xquery">import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 

(: this is a manual run oftde functionality to verify generated extraction tempaltes :)
let $tde := xdmp:filesystem-file("/Users/rgupta/git/xdmp-entity-services/entity-services-e2e/src/main/ml-schemas/valid-ref-combo-sameDocument-subiri.tdex")
let $doc := (//es:instance/Run/id)/root()
let $ex := tde:document-data-extract($doc, xdmp:unquote($tde)/node())
return map:get(map:get($ex, </query><query name="run" focus="false" listorder="9" taborder="6" active="true" database="8180372341861010319" server="11262157093508720066" mode="sql">SELECT distance, count(*)
FROM "Run"
GROUP by distance
ORDER by distance

-- limit 1</query><query name="SPARQL" focus="false" listorder="11" taborder="7" active="true" database="8180372341861010319" server="11262157093508720066" mode="sparql">PREFIX es: &lt;http://marklogic.com/entity-services&gt;

select distinct ?p ?o
where 
{
  &lt;http://grechaw.github.io/entity-types/Race-0.0.1/Runner&gt; ?p ?o
}</query><query name="Query 1" focus="false" listorder="8" taborder="8" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
import module namespace imtitle = "http://refCombo#Imtitle-0.0.1" at "/conv/valid-ref-combo-sameDocument-subiri.xqy";

declare namespace html = "http://www.w3.org/1999/xhtml";

(: This is the ingest script.  In my case, 'staging' is a collection.
 : The ingestion embeds runners into runs, and so we skip runners and
 : just do run ingestion.
 :)
for $uri in cts:uris( (), (), cts:collection-query("raw") )
return 
  if (contains($uri, "/customers/"))
  then
    xdmp:document-insert("/Customers/" || xdmp:random() || ".xml", 
      imtitle:instance-to-envelope(
        imtitle:extract-instance-Customer(doc($uri))), 
      xdmp:default-permissions(), "customer-envelopes")
  else if (contains($uri, "/orders/"))
  then
    xdmp:document-insert("/Orders/" || xdmp:random() || ".xml", 
      imtitle:instance-to-envelope(
        imtitle:extract-instance-Order(doc($uri))), 
      xdmp:default-permissions(), "order-envelopes")
  else if (contains($uri, "/products/"))
  then
    xdmp:document-insert("/Products/" || xdmp:random() || ".xml", 
      imtitle:instance-to-envelope(
        imtitle:extract-instance-Product(doc($uri))), 
      xdmp:default-permissions(), "product-envelopes")
  else ()</query><query name="Query 2" focus="false" listorder="9" taborder="9" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";

import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 
import module namespace esi = "http://marklogic.com/entity-services-impl" at "/MarkLogic/entity-services/entity-services-impl.xqy"; 

(: this script generates all of the artifacts supported in Entity Services for EA-2 :)
let $project-location := "/Users/rgupta/git/xdmp-entity-services/entity-services-e2e"
let $gen-prefix := $project-location || "/gen/"
let $d := es:entity-type-from-node(fn:doc("valid-ref-combo-sameDocument-subiri.json"))
return ($d ,
xdmp:save($gen-prefix || "ml-modules/ext/valid-ref-combo-sameDocument-subiri.xqy", es:conversion-module-generate($d)),
xdmp:save($gen-prefix || "ml-schemas/valid-ref-combo-sameDocument-subiri.tdex", es:extraction-template-generate($d)),
xdmp:save($gen-prefix || "ml-schemas/valid-ref-combo-sameDocument-subiri.xsd", es:schema-generate($d)),
xdmp:save($gen-prefix || "ml-config/databases/content-database.json", es:database-properties-generate($d))
)
</query><query name="Query 3" focus="false" listorder="10" taborder="" active="false" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 
import module namespace esi = "http://marklogic.com/entity-services-impl" at "/MarkLogic/entity-services/entity-services-impl.xqy"; 

let $d := es:entity-type-from-node(fn:doc("valid-ref-combo-sameDocument-subiri.json"))
return es:extraction-template-generate($d)</query><query name="Query 4" focus="false" listorder="11" taborder="" active="false" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 
import module namespace esi = "http://marklogic.com/entity-services-impl" at "/MarkLogic/entity-services/entity-services-impl.xqy"; 

let $d := es:entity-type-from-node(fn:doc("valid-ref-combo-sameDocument-subiri.json"))
return es:schema-generate($d)</query><query name="Query 5" focus="false" listorder="12" taborder="" active="false" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 
import module namespace esi = "http://marklogic.com/entity-services-impl" at "/MarkLogic/entity-services/entity-services-impl.xqy"; 

let $d := es:entity-type-from-node(fn:doc("valid-ref-combo-sameDocument-subiri.json"))
return es:database-properties-generate($d)</query><query name="Query 6" focus="false" listorder="13" taborder="10" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
import module namespace imtitle = "http://refCombo#Imtitle-0.0.1" at "/conv/valid-ref-combo-sameDocument-subiri.xqy";

(: This script runs extract functions to verify the initial import and how extraction looks :)
let $order-e := imtitle:extract-instance-Order(
doc("/Users/rgupta/git/xdmp-entity-services/entity-services-functionaltests/src/main/resources/northwind/orders/10679.xml"))
let $prod-e := imtitle:extract-instance-Product(
doc("/Users/rgupta/git/xdmp-entity-services/entity-services-functionaltests/src/main/resources/northwind/products/28.xml"))
let $cust-e := 
imtitle:extract-instance-Customer(
doc("/Users/rgupta/git/xdmp-entity-services/entity-services-functionaltests/src/main/resources/northwind/customers/BLONP.xml"))
return
(
$order-e,
imtitle:instance-to-envelope($order-e),
$prod-e,
imtitle:instance-to-envelope($prod-e),
$cust-e,
imtitle:instance-to-envelope($cust-e)
)</query><query name="Query 7" focus="true" listorder="14" taborder="11" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 

(: this is a manual run oftde functionality to verify generated extraction tempaltes :)
let $tde := xdmp:filesystem-file("/Users/rgupta/git/xdmp-entity-services/entity-services-e2e/src/main/ml-schemas/valid-ref-combo-sameDocument-subiri.tdex")
let $doc := (//es:instance/Customer)/root()
let $ex := tde:document-data-extract($doc, xdmp:unquote($tde)/node())
return $ex
(: map:get(map:get($ex, :)</query><query name="Query 8" focus="false" listorder="15" taborder="12" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 

let $doc := (//es:instance/Customer/CompanyName)/root()
return $doc</query><query name="Query 9" focus="false" listorder="16" taborder="13" active="true" database="1143593040996175575" server="8471395049884090148" mode="sql">SELECT c.CompanyName
FROM Customer c
where c.Country = 'Portugal'

</query><query name="Query 10" focus="false" listorder="17" taborder="14" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
fn:doc("valid-ref-combo-sameDocument-subiri.json")</query><query name="Query 11" focus="false" listorder="18" taborder="15" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
xdmp:document-delete(fn:collection()/base-uri())</query><query name="Query 12" focus="false" listorder="19" taborder="16" active="true" database="18411490980680519632" server="11262157093508720066" mode="xquery">xquery version "1.0-ml";
fn:doc("/Users/rgupta/git/xdmp-entity-services/entity-services-functionaltests/src/main/resources/northwind/customers/ALFKI.xml")</query><query name="Query 13" focus="false" listorder="20" taborder="17" active="true" database="1143593040996175575" server="8471395049884090148" mode="xquery">xquery version "1.0-ml";
xdmp:document-delete("valid-ref-combo-sameDocument-subiri.xsd")</query><query name="Query 14" focus="false" listorder="21" taborder="18" active="true" database="1143593040996175575" server="8471395049884090148" mode="sql">SELECT c.Country, COUNT(o.OrderID)
FROM 'Order' o, 'Customer' c
where c.CustomerId = o.CustomerID
group by c.Country
</query></workspace></export>
