xquery version "1.0-ml";

module namespace translator = "http://marklogic.com/example/translator";
import module namespace es = "http://marklogic.com/entity-services"
    at "/MarkLogic/entity-services/entity-services.xqy";

(: A version translating module.
 : Each of the functions in the module were modified from the code
 : generated by es:version-translator-generate()
 :)

(: This function is for a query-time conversion of original envelopes to next instances :)
declare function translator:up-convert(
    $source as node()
) as map:map
{
    let $source-node := translator:init-source($source, 'Person')

    return
        json:object()
            =>translator:copy-attachments($source-node)
            =>map:with("$type", "Person")
            =>   map:with('id',  xs:long($source-node/id))
            =>es:optional('name', "A default value")
};

(: This function converts instances up to the next model, knowing where to source
 : the new property 'p2' from the attachments.
 :)
declare function translator:migrate(
$source as node()
) as map:map
{
let $source-node := translator:init-source($source, 'Person')
(: the attachments are JSON in an XML envelope, so unquote them :)
let $original-doc := xdmp:unquote($source/es:envelope/es:attachments/text())
let $name := xs:string($original-doc/name)

return
json:object()
    =>translator:copy-attachments($source-node)
    =>map:with("$type", "Person")
    =>   map:with('id',  xs:long($source-node/id))
    =>es:optional('name',  $name)
};

(: This is for a query-time conversion of next envelopes to original instances :)
declare function translator:down-convert(
    $source as node()
) as map:map
{
    let $source-node := translator:init-source($source, 'Person')

    return
    json:object()
        =>translator:copy-attachments($source-node)
        =>map:with("$type", "Person")
        =>map:with('id', xs:long($source-node/id))
};

declare private function translator:init-source(
    $source as node()*,
    $entity-type-name as xs:string
) as node()*
{
    if ( ($source//es:instance/element()[node-name(.) eq xs:QName($entity-type-name)]))
    then $source//es:instance/element()[node-name(.) eq xs:QName($entity-type-name)]
    else $source
};


declare private function translator:copy-attachments(
    $instance as json:object,
    $source as node()*
) as json:object
{
    $instance
    =>es:optional('$attachments', $source ! fn:root(.)/es:envelope/es:attachments/node())
};
