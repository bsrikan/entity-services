<export><workspace name="races"><query name="02. check extract-instance" focus="true" listorder="3" taborder="3" active="true" database="1864503829138194350" server="4141854128175404443" database-name="entity-services-examples-content" server-name="entity-services-examples" mode="xquery">(: Using database entity-services-examples-content :)
xquery version "1.0-ml";
import module namespace race = "http://grechaw.github.io/entity-types#Race-0.0.1" at "/ext/Race-0.0.1.xqy";

declare variable $PATH as xs:string := "/MarkLogic/git";

(: This script runs extract functions to verify the initial import and how extraction looks :)
let $runner-e := race:extract-instance-Runner(
  doc($PATH || "/entity-services/entity-services-examples/data/race-data/runners/xaw.json")
)
let $run-e := race:extract-instance-Run(
  doc($PATH || "/entity-services/entity-services-examples/data/race-data/runs/138.json")
)
let $race-e := race:extract-instance-Race(
  doc($PATH || "/entity-services/entity-services-examples/data/race-data/races/10k2.json")
)
let $race-f := race:extract-instance-Race(
  doc($PATH || "/entity-services/entity-services-examples/data/race-data/races/10k1.json")
)

return (
  $run-e, race:instance-to-envelope($run-e),
  $race-e, race:instance-to-envelope($race-e)
)</query><query name="04. race" focus="false" listorder="5" taborder="5" active="true" database="5918579729198110779" server="4141854128175404443" database-name="Documents" server-name="" mode="sql">-- USE entity-services-examples-content;

SELECT 
  Race.name, 
  Race.wonByRunner, 
  Race.courseLength, 
  Run.id, 
  Run.distance, 
  Run.duration, 
  Run.runnerName,
  Run.runnerAge,
  Run.runnerGender
FROM 
  Race
JOIN Race_comprisedOfRuns AS r ON Race.name = r.name
JOIN RUN ON r.comprisedOfRuns = Run.id
ORDER BY Run.duration
</query><query name="03. tde-manual" focus="false" listorder="4" taborder="4" active="true" database="1864503829138194350" server="4141854128175404443" database-name="entity-services-examples-content" server-name="entity-services-examples" mode="xquery">(: Using database entity-services-examples-content :)
xquery version "1.0-ml";
import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 

declare variable $PATH as xs:string := "/MarkLogic/git";

(: this is a manual run of tde functionality to verify generated extraction tempaltes :)
let $tde := xdmp:filesystem-file($PATH || "/entity-services/entity-services-examples/src/main/ml-schemas/Race-0.0.1.tdex")

let $doc := (//es:instance/Run/id)/root()[1]
let $ex := tde:node-data-extract($doc, xdmp:unquote($tde)/node())

let $racedocs := (//es:instance/Race)/root()
let $ex2 := tde:node-data-extract($racedocs, xdmp:unquote($tde)/node())
return ($ex , $ex2 )
</query><query name="05. run" focus="false" listorder="6" taborder="6" active="true" database="5918579729198110779" server="4141854128175404443" database-name="Documents" server-name="" mode="sql">-- USE entity-services-examples-content;
SELECT distance, count(*)
FROM Race.Run
GROUP by distance
ORDER by distance DESC</query><query name="06. ontology" focus="false" listorder="7" taborder="7" active="true" database="1864503829138194350" server="4141854128175404443" database-name="entity-services-examples-content" server-name="entity-services-examples" mode="sparql"># Using database entity-services-examples-content
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
select distinct ?s ?superClass ?p ?o
where 
{
  ?s rdfs:subClassOf ?superClass.
  ?superClass ?p ?o . 
  filter (?s =  &lt;http://grechaw.github.io/entity-types/Race-0.0.1/Runner&gt; )
}</query><query name="00. README" focus="false" listorder="1" taborder="1" active="true" database="5918579729198110779" server="10702847959065605031" database-name="Documents" server-name="App-Services" mode="xquery">(:
 : 
 :
 :
 :)</query><query name="10. Search API" focus="false" listorder="8" taborder="11" active="true" database="1864503829138194350" server="4141854128175404443" database-name="entity-services-examples-content" server-name="entity-services-examples" mode="xquery">xquery version "1.0-ml";
declare namespace search = "http://marklogic.com/appservices/search";

let $searches := 
(
"entity-type:Race",
"Charles"
)

let $get-call := function($search) {
 xdmp:http-get("http://localhost:8203/v1/search?options=race&amp;amp;q=" || fn:encode-for-uri($search),
   &lt;options xmlns="xdmp:http"&gt;
    &lt;authentication method="digest"&gt;
         &lt;username&gt;admin&lt;/username&gt;
         &lt;password&gt;admin&lt;/password&gt;
       &lt;/authentication&gt;
    &lt;headers&gt;
      &lt;accept&gt;application/xml&lt;/accept&gt;
    &lt;/headers&gt;
   &lt;/options&gt;)[2]//search:extracted/*
   }


return $searches ! $get-call(.)</query><query name="09. Optic" focus="false" listorder="9" taborder="10" active="true" database="1864503829138194350" server="4141854128175404443" database-name="entity-services-examples-content" server-name="entity-services-examples" mode="xquery">import module namespace op = "http://marklogic.com/optic" at "/MarkLogic/optic.xqy";
    
    
(: TODO this is not used, but shows how to get column names from TDE :)
let $race-view := tde:get-view("Race", "Race")
let $column-names := ($race-view=&gt;map:get("view")=&gt;map:get("columns")=&gt;json:array-values()) 
                      ! map:get(., "column")=&gt;map:get("name")



let $rv := op:from-view("Race", "Race")
let $join-table :=  op:from-view("Race", "Race_comprisedOfRuns")

let $joined := op:join-inner($rv, 
              $join-table, 
              op:on(op:view-col("Race","name"), op:view-col("Race_comprisedOfRuns", "name")))
let $final-join := 
   op:join-inner($joined, op:from-view("Race", "Run"), 
   op:on("comprisedOfRuns", "id"))
   =&gt;op:order-by(op:view-col("Race", "name"))
   
   
return $final-join=&gt;op:result()</query><query name="Conversion" focus="false" listorder="10" taborder="13" active="true" database="5918579729198110779" server="10702847959065605031" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";

</query><query name="model-2-extract" focus="false" listorder="11" taborder="12" active="true" database="5918579729198110779" server="10702847959065605031" database-name="Documents" server-name="App-Services" mode="xquery">xquery version "1.0-ml";


(: source loaded from csv :)

import module namespace race2 = "http://grechaw.github.io/entity-types#Race-0.0.1-source-2" at "/ext/Race-0.0.1-source-2.xqy";

let $doc := doc("2016-angel-island.csv-25.json" )
return
(
$doc,
race2:extract-instance-Angel-Island( $doc )

)
</query><query name="01. load-report" focus="false" listorder="2" taborder="2" active="true" database="5918579729198110779" server="4141854128175404443" database-name="Documents" server-name="" mode="xquery">import module namespace es = "http://marklogic.com/entity-services" at "/MarkLogic/entity-services/entity-services.xqy"; 

(
"Raw docs: ", count(cts:search(collection("raw"), cts:true-query())),
"Non raw: ", count(cts:search(collection(), cts:not-query(cts:collection-query("raw")))),
"Race envelopes: ", count(//es:instance/Race),
"Run envelopes: ", count(//es:instance/Run),
"Collection names", cts:collections()
)</query><query name="07. instances" focus="false" listorder="12" taborder="8" active="true" database="1864503829138194350" server="4141854128175404443" database-name="entity-services-examples-content" server-name="entity-services-examples" mode="xquery">sem:sparql('
           prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
           prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
           prefix fn: &lt;http://www.w3.org/2005/xpath-functions#&gt;
           
           select ?s ?docUri
           where 
           {
           ?s a &lt;http://grechaw.github.io/entity-types/Race-0.0.1/Runner&gt; ;
               rdfs:isDefinedBy ?docUri .
           }
           ', (), (), sem:ruleset-store("subClassOf.rules", sem:store()))</query><query name="08. inference instance" focus="false" listorder="13" taborder="9" active="true" database="1864503829138194350" server="4141854128175404443" database-name="entity-services-examples-content" server-name="entity-services-examples" mode="xquery">sem:sparql('
           prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
           prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
           prefix fn: &lt;http://www.w3.org/2005/xpath-functions#&gt;
           
           select ?s ?docUri ?xml
           where 
           {
           ?s a foaf:Person ;
               rdfs:isDefinedBy ?docUri .
           BIND (fn:doc($docUri) as $xml)
           }
           LIMIT 2
           ', (), (), sem:ruleset-store("subClassOf.rules", sem:store()))</query></workspace></export>
